- Referential transparency is what I previously knew as "purity" of a function
- Purity is overloaded in this space to also mean that programs written in the
    language are a structure of lambda expressions.
- Pseudo BNF:
 Expression := Expression
             | Variable
             | Numerical Constants
             | Abstraction (functions)
 Abstraction := Head Body
 Head := ùúÜ Variable
 Body := Expression
- Beta Reduction is kinda like evaluation in other languages
- Free variables are locals in other languages
- Alpha equivalency does not apply to free variables
- Multiple args are accomplished via currying
- Combinators have no free variables
- Other methods of evaulation vs left to right, top to bottom
